---

name: Аргументы, переменные и инструкции
theory: |

  Новички иногда пытаются сделать примерно такое определение функции:

  ```python
  def show_date('Today is: December 5'):
      # какой-нибудь код
  ```

  Запустить код не получится — он содержит синтаксическую ошибку. Вместо переменной в аргументе написана строка, то есть значение.

  **Аргумент должен быть переменной**, иначе он не сможет быть аргументом, то есть чем-то, что *принимает значение при вызове*.

  Если же вам нужна какая-то информация в функции, и вы заранее знаете какая именно, то аргумент для этого не нужен, ведь мы уже умеем сохранять значения для последующего использования —  достаточно создать переменную в самом теле:

  ```python
  def show_date():
      text = 'Today is: December 5'
      # какой-нибудь код
  ```

  ---

  Понятие «создать функцию» имеет много синонимов: «реализовать», «определить» и даже «заимплементить» (от слова implement). Все они встречаются в повседневной практике на работе.

instructions: |

  Сэм составляет множество карт, и ему часто нужно выводить на экран повторяющиеся символы для визуализации маршрутов. Например, так Сэм иллюстрирует узкие дороги между городами:

  ```
  Meereen =-=-=-=- Myr
  ```

  А так иллюстрирует широкие трассы:

  ```
  Vaes Dothrak ======== Vahar
  ```

  Строки в Python — это последовательности (списки, наборы) символов в нужном порядке.  В [документации Python](https://docs.python.org/3/library/stdtypes.html#common-sequence-operations) приведены операции, общие для всех последовательностей. Так, любую последовательность — в том числе и строку — можно повторить несколько раз, умножив оную на число (это не будет нарушением типизации, ведь именно такое сочетание типов — последовательность слева и число справа — предусмотрено создателями языка для операции умножения):

  ```python
  print('=-' * 4)
  ```

  <pre class='hexlet-basics-output'>=-=-=-=-</pre>

  Сэм не очень доволен. Ему нужно нарисовать сотни маршрутов разной длины с разными символами. Неудобно размножать строки сотни раз и сотни раз вызывать `print`.

  Напишите для Сэма функцию `print_seq`, которая сама выводит на экран получившиеся повторения. Она принимает два аргумента — строку и число, и выводит повторяющуюся строку на экран. Для генерации строки используйте "размножение" строк.

  Вот пример того, как Сэм будет использовать написанную вами `print_seq`:

  ```python
  print_seq('=-', 4)
  ```

  <pre class='hexlet-basics-output'>=-=-=-=-</pre>

tips: []
